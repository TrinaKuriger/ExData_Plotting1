message("getting cached data")  # ... send this message to the console
return(m)                       # ... and return the mean ... "return" ends
#   the function cachemean(), note
}
data <- x$get()        # we reach this code only if x$getmean() returned NULL
m <- mean(data, ...)   # if m was NULL then we have to calculate the mean
x$setmean(m)           # store the calculated mean value in x (see setmean() in makeVector
m               # return the mean to the code that called this function
}# end cachemean function
#jkuriger
#Intro to R Programming - Coursera
#Assignment 2
makeVector <- function(x = numeric()) {      # input x will be a vector
m <- NULL    #  m will be our 'mean' and it's reset to NULL every
#    time makeVector is called
#  note these next three functions are defined but not run when makeVector is called.
#   instead, they will be used by cachemean() to get values for x or for
#   m (mean) and for setting the mean.  These are usually called object 'methods'
get <- function() { x }   # this function returns the value of the original vector
set <- function(y) {    # takes an input vector
x <<- y         # saves the input vector
m <<- NULL      # resets the mean to NULL, basically what happens when a new object is generated.
}
setmean <- function(mean)  { m <<- mean }
# this is called by cachemean() during the first cachemean()
#  access and it will store the value using superassignment
getmean <- function() { m } # this will return the cached value to cachemean() on
#  subsequent accesses
list(get = get,          #  OK, this is accessed each time makeVector() is called,
setmean = setmean,  #   that is, each time we make a new object.  This is a list of
getmean = getmean)  #   the internal functions ('methods') so a calling function
#   knows how to access those methods.
}#end makeVector function
bigVec <- makeVector(1:1000)
str(bigVec)
cachemean(bigVec)
?inverse
?matrix inverse
?? matrix inverse
??inverse
?inv
#jkuriger
#Intro to R Programming - Coursera
#Assignment 2
cacheSolve <- function(x, ...) {   # the input x is an object created by makeVector
inv <- x$getinv()               # accesses the object 'x' and gets the value of the mean
if(!is.null(inv)) {              # if mean was already cached (not NULL) ...
message("getting cached data")  # ... send this message to the console
return(inv)                       # ... and return the mean ... "return" ends
#   the function cachemean(), note
}
data <- x$get()        # we reach this code only if x$getmean() returned NULL
inv <- solve(data)   # if m was NULL then we have to calculate the mean
x$setinv(inv)           # store the calculated mean value in x (see setmean() in makeVector
inv               # return the mean to the code that called this function
}# end cachemean function
#jkuriger
#Intro to R Programming - Coursera
#Assignment 2
makeCacheMatrix <- function(x = matrix()) {      # input x will be a vector
inv <- NULL    #  m will be our 'mean' and it's reset to NULL every
#    time makeVector is called
#  note these next three functions are defined but not run when makeVector is called.
#   instead, they will be used by cachemean() to get values for x or for
#   m (mean) and for setting the mean.  These are usually called object 'methods'
get <- function() { x }   # this function returns the value of the original vector
set <- function(y) {    # takes an input vector
x <<- y         # saves the input vector
m <<- NULL      # resets the mean to NULL, basically what happens when a new object is generated.
}
setinv <- function(inver)  { inv <<- inver }
# this is called by cachemean() during the first cachemean()
#  access and it will store the value using superassignment
getinv <- function() { inv } # this will return the cached value to cachemean() on
#  subsequent accesses
list(get = get,          #  OK, this is accessed each time makeVector() is called,
setinv = setinv,  #   that is, each time we make a new object.  This is a list of
getinv = getinv)  #   the internal functions ('methods') so a calling function
#   knows how to access those methods.
}#end makeVector function
a <- matrix(c(-1, -2, 1, 1), 2, 2)
a
makeCacheMatrix(a)
cacheSolve(a)
x
s
a
a;pha <- makeCacheMatrix(a)
alpha <- makeCacheMatrix(a)
cacheSolve(alpha)
beta <- cacheSolve(alpha)
#jkuriger
#Intro to R Programming - Coursera
#Assignment 2
cacheSolve <- function(x, ...) {   # the input x is an object created by makeVector
inv <- x$getinv()               # accesses the object 'x' and gets the value of the mean
if(!is.null(inv)) {              # if mean was already cached (not NULL) ...
message("getting cached data")  # ... send this message to the console
inv                       # ... and return the mean ... "return" ends
#   the function cachemean(), note
}
data <- x$get()        # we reach this code only if x$getmean() returned NULL
inv <- solve(data)   # if m was NULL then we have to calculate the mean
x$setinv(inv)           # store the calculated mean value in x (see setmean() in makeVector
inv               # return the mean to the code that called this function
}# end cachemean function
beta <- cacheSolve(alpha)
cacheSolve(alpha)
#jkuriger
#Intro to R Programming - Coursera
#Assignment 2
cacheSolve <- function(x, ...) {   # the input x is an object created by makeVector
inv <- x$getinv()               # accesses the object 'x' and gets the value of the mean
if(!is.null(inv)) {              # if mean was already cached (not NULL) ...
message("getting cached data")  # ... send this message to the console
return(inv)                       # ... and return the mean ... "return" ends
#   the function cachemean(), note
}
data <- x$get()        # we reach this code only if x$getmean() returned NULL
inv <- solve(data)   # if m was NULL then we have to calculate the mean
x$setinv(inv)           # store the calculated mean value in x (see setmean() in makeVector
inv               # return the mean to the code that called this function
}# end cachemean function
cacheSolve(alpha)
alpha*beta
alpha
alp <- alpha$get()
alp
alp*beta
alp%*%beta
rm(cacheSolve)
rm(makeCacheMatrix)
## makeCacheMatrix() takes in a matrix and creates an object that stores the value of
## that matrix and can store an additional value (in our case and inverse matrix)
## that is associated with that matrix
##
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL     # the inv variable is created and set to null when the object
# is created
get <- function() { x }   # returns the original matrix
set <- function(y) {      # takes a new matrix and assigns it to x
x <<- y
inv <<- NULL            # resets inv to NULL when the matrix value is changed
}
setinv <- function(inver)  { inv <<- inver }  # sets the value of inv for the
# object using superassignment
getinv <- function() { inv } # returns the value of inv for the object
list(get = get, setinv = setinv, getinv = getinv) # defines methods associated
# with makeCacheMatrix object
}#end makeCacheMatrix function
## cacheSolve() takes in the object created by makeCacheMatrix() and returns its
## inverse value. It obtains the inverse value by first checking to see if there is
## already one stored in makeCacheMatrix. If there is not one stored it will calculate
## the value and store it in the makeCacheMatrix object.
cacheSolve <- function(x, ...) {   # x must be a makeCacheMatrix object
inv <- x$getinv()         # gets the value of inv for the object
if(!is.null(inv)) {       # this loop runs if the value of inv is already stored
message("getting cached data")  # reports that the value is from cache
return(inv)                     # returns inv value and exits function
}
# this code below is used if the inv value is not cached (i.e. is NULL)
data <- x$get()       # gets the value of the matrix inside the object
inv <- solve(data)    # calculates the inverse of the matrix using solve() function
x$setinv(inv)         # sets the inv value inside the makeCacheMatrix object
inv                   # returns the inv value
}# end cachemean function
a <- matrix(c(-1, -2, 1, 1), 2, 2)
alpha <- makeCacheMatrix(a)
cacheSolve(alpha)
beta <- cacheSolve(alpha)
alp <- alpha$get()
alp%*%beta
library(datasets)
data(iris)
?iris
str(iris)
View(iris)
View(iris)
?mapply
?tapply
tapply(iris, iris$Species, colMeans)
tapply(iris, iris$Species, FUN = colMeans)
str(iris$Species)
summary(iris$Species)
colMeans(iris$Sepal.Length)
str(iris$Sepal.Length)
z <- iris(Species=virginica)
z <- iris[,(Species=virginica)]
View(iris)
View(iris)
z <- iris[,(iris$Species=virginica)]
z <- iris[,(iris$Species="virginica")]
z <- iris[(iris$Species="virginica")]
z <- iris[iris$Species="virginica"]
z <- iris(iris$Species="virginica")
z <- iris(iris$Species=="virginica")
z <- iris[iris$Species=="virginica"]
View(iris)
View(iris)
rm(iris)
data(iris)
str(iris)
View(iris)
View(iris)
View(iris)
library(datasets)
data(iris)
str(iris)
head(iris)
view(iris)
View(iris)
View(iris)
viginica <- iris[, 101:150]
viginica <- iris[101:150, ]
viginica
colMeans(viginica)
str(viginica)
mean(viginica$Sepal.Length)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
str(mtcars)
head(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(mpg, hp, mean))
horsepower <- with(mtcars, tapply(mpg, hp, mean))
horsepower
horsepower$52
horsepower["52"]
horsepower["52"] - horsepower["91"]
with(mtcars, tapply(hp, cyl, mean))
horsepower <- with(mtcars, tapply(hp, cyl, mean))
x <- horsepower['4']
x
y <- horsepower['8']
y
y - x
x - y
a = 1113              #### set a-f to appropriate values
b = 450
c = 1873
d = 1114
e = 682
f = 593
n = a + b + c + d + e + f
t.string = "Exposure 1"
u.string = "Exposure 2"
v.string = "Exposure 3"
w.string = "Disease"
x.string = "No Disease"
expected.count.a = (a + b) * (a + c + e) / n
expected.count.b = (a + b) * (b + d + f) / n
expected.count.c = (c + d) * (a + c + e) / n
expected.count.d = (c + d) * (b + d + f) / n
expected.count.e = (e + f) * (a + c + e) / n
expected.count.f = (e + f) * (b + d + f) / n
prob_a_given_a&b <- a / (a + b)
prob_a_given_ab <- a / (a + b)
prob_a_given_ab <- a / (a + b)
prob_c_given_cd <- c / (c + d)
prob_e_given_ef <- e / (e + f)
a = 1113              #### set a-f to appropriate values
b = 450
c = 1873
d = 1114
e = 682
f = 593
n = a + b + c + d + e + f
t.string = "Exposure 1"
u.string = "Exposure 2"
v.string = "Exposure 3"
w.string = "Disease"
x.string = "No Disease"
expected.count.a = (a + b) * (a + c + e) / n
expected.count.b = (a + b) * (b + d + f) / n
expected.count.c = (c + d) * (a + c + e) / n
expected.count.d = (c + d) * (b + d + f) / n
expected.count.e = (e + f) * (a + c + e) / n
expected.count.f = (e + f) * (b + d + f) / n
expected.count.a
expected.count.b
expected.count.c
expected.count.d
expected.count.e
expected.count.f
prob_a_given_ab <- a / (a + b)
prob_c_given_cd <- c / (c + d)
prob_e_given_ef <- e / (e + f)
install.packages("xlsxjars")
library(xlsxjars)
library(xlsx)
install.packages("xlsx")
library(xlsx)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
dat <- download.file(fileURL, destfile = "ngap.xlsx", mode = "wb")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
dat <- download.file(fileURL, destfile = "ngap.xlsx", mode = "wb")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileURL, destfile = "ngap.xlsx", mode = "wb")
?read.xlsx
colIndex <- 7:15
rowIndex <- 18:23
dat <- read.xlsx("ngap.xlsx", sheetIndex = 1, colIndex = colIndex, rowIndex = rowIndex)
View(dat)
View(dat)
val <- sum(dat$Zip*dat$Ext,na.rm=T)
idaho <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
DT <- fread(idaho)
a <- mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
b <- mean(DT$pwgtp15,by=DT$SEX)
c <- system.time(DT[,mean(pwgtp15),by=SEX])
d <- rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
e <- system.time(tapply(DT$pwgtp15,DT$SEX,mean))
f <- system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
idaho <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
DT <- fread(idaho)
library(data.table)
idaho <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
DT <- fread(idaho)
a <- mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
b <- mean(DT$pwgtp15,by=DT$SEX)
c <- DT[,mean(pwgtp15),by=SEX]
d <- rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
e <- tapply(DT$pwgtp15,DT$SEX,mean)
f <- sapply(split(DT$pwgtp15,DT$SEX),mean)
?xmlParse
??xmlParse
library(XML)
?xmlParse
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran,country: r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran,
| r_version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.1.1", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10)).
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !(is.na(r_version)) )
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
setwd("~/Desktop/MOOCs/Data Science Specialization/Exploratory Data Analysis/Course Projects/ExData_Plotting1")
#1234567890123456789112345678921234567893123456789012345678911234567892123456789
power_data <- read.table("household_power_consumption.txt", sep = ";",
header = TRUE, na.strings = "?", stringsAsFactors = F)
subset_data <- subset(power_data, Date == "1/2/2007" | Date == "2/2/2007")
png("plot1.png")
hist(subset_data$Global_active_power,  xlab = "Global Active Power (kilowatts)",
col = "red",main = "Global Active Power")
dev.off()
?png
?dev.off
plot(Sub_metering_1 ~ datetime, data = subset_data,
type = "l", ylab = "Energy sub metering", xlab = "")
lines(subset_data$datetime, subset_data$Sub_metering_2, col = "red")
lines(subset_data$datetime, subset_data$Sub_metering_3, col = "blue")
legend("topright", col = c("black", "red", "blue"), lty = c("solid", "solid", "solid"), legend = names(subset_data[,7:9]))
## jkuriger
## Exploratory Data Analysis
## Course PRoject 1, plot 1
## creates a histogram showing the global active power
##  NOTE  ##
## Data file "household_power_consumption.txt" must be in working directory
# read in data into data frame, changing ? to na
power_data <- read.table("household_power_consumption.txt", sep = ";",
header = TRUE, na.strings = "?", stringsAsFactors = F)
# create a subset of data that only contains the Feb 1-2, 2007
subset_data <- subset(power_data, Date == "1/2/2007" | Date == "2/2/2007")
# set the plot to be png formant
png("plot1.png")
# create histogram of global active power, making the bar color red.
hist(subset_data$Global_active_power, xlab = "Global Active Power (kilowatts)",
col = "red", main = "Global Active Power")
# close the plot file
dev.off()
library(lubridate)
# add an additional column, datetime, containing combined date and time
#     information to the subsetted dataframe
subset_data$datetime <- dmy(subset_data$Date) + hms(subset_data$Time)
# set the plot to be a png file
png("plot2.png")
# plot global active power against datetime using line graph
plot(subset_data$datetime, subset_data$Global_active_power, type = "l",
xlab = "", ylab = "Global Active Power (kilowatts)")
# close the plot file
dev.off()
png("plot3.png")
plot(Sub_metering_1 ~ datetime, data = subset_data,
type = "l", ylab = "Energy sub metering", xlab = "")
lines(subset_data$datetime, subset_data$Sub_metering_2, col = "red")
lines(subset_data$datetime, subset_data$Sub_metering_3, col = "blue")
legend("topright", col = c("black", "red", "blue"), lty = c("solid", "solid", "solid"), legend = names(subset_data[,7:9]))
dev.off()
View(subset_data)
# set the plot to be a png file
png("plot3.png")
# plot sub-metering1 against datetime using line graph
plot(Sub_metering_1 ~ datetime, data = subset_data,
type = "l", ylab = "Energy sub metering", xlab = "")
lines(subset_data$datetime, subset_data$Sub_metering_2, col = "red")#add line for submetering2
lines(subset_data$datetime, subset_data$Sub_metering_3, col = "blue")#add line for submetering2
legend("topright", col = c("black", "red", "blue"), lty = c("solid", "solid",
"solid"), legend = names(subset_data[,7:9]))#add legend, use names of
#     columns as legend names
# close the plot file
dev.off()
# set the plot to be a png file
png("plot3.png")
# plot sub-metering1 against datetime using line graph
plot(Sub_metering_1 ~ datetime, data = subset_data,
type = "l", ylab = "Energy sub metering", xlab = "")
# add red line for submetering2
lines(subset_data$datetime, subset_data$Sub_metering_2, col = "red")
# add blue line for submetering3
lines(subset_data$datetime, subset_data$Sub_metering_3, col = "blue")
#add legend, use names of columns as legend names
legend("topright", col = c("black", "red", "blue"), lty = c("solid", "solid",
"solid"), legend = names(subset_data[,7:9]))
# close the plot file
dev.off()
png("plot4.png")
par(mfrow=c(2,2))
plot(subset_data$datetime, subset_data$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power (kilowatts)")
plot(subset_data$datetime, subset_data$Voltage, type = "l", xlab = "datetime", ylab ="Voltage")
plot(Sub_metering_1 ~ datetime, data = subset_data, type = "l", ylab = "Energy sub metering", xlab = "")
lines(subset_data$datetime, subset_data$Sub_metering_2, col = "red")
lines(subset_data$datetime, subset_data$Sub_metering_3, col = "blue")
legend("topright", col = c("black", "red", "blue"), bty = "n",   lty = c("solid", "solid", "solid"),  legend = names(subset_data[,7:9]))
plot(subset_data$datetime, subset_data$Global_reactive_power, type = "l", xlab = "datetime", ylab ="Global_reactive_power")
dev.off()
# set the plot to be png formant
png("plot4.png")
# set parameters so that figure is a 2x2 display of the four graphs
par(mfrow=c(2,2))
#------------------ first quadrant ------------------------
# plot global active power against datetime using line graph
plot(subset_data$datetime, subset_data$Global_active_power, type = "l",
xlab = "", ylab = "Global Active Power (kilowatts)")
#------------------ second quadrant ------------------------
# plot voltage against datetime using line graph
plot(subset_data$datetime, subset_data$Voltage, type = "l",
xlab = "datetime", ylab ="Voltage")
#------------------ third quadrant ------------------------
# plot sub-metering1 against datetime using line graph
plot(Sub_metering_1 ~ datetime, data = subset_data,
type = "l", ylab = "Energy sub metering", xlab = "")
# add red line for submetering2
lines(subset_data$datetime, subset_data$Sub_metering_2, col = "red")
# add blue line for submetering3
lines(subset_data$datetime, subset_data$Sub_metering_3, col = "blue")
#add legend, use names of columns as legend names
legend("topright", col = c("black", "red", "blue"), lty = c("solid", "solid",
"solid"), legend = names(subset_data[,7:9]))
#------------------ fourth quadrant ------------------------
# plot global reactive power against datetime using line graph
plot(subset_data$datetime, subset_data$Global_reactive_power,
type = "l", xlab = "datetime", ylab ="Global_reactive_power")
# close the plot file
dev.off()
source('~/.active-rstudio-document', echo=TRUE)
source('~/Desktop/MOOCs/Data Science Specialization/Exploratory Data Analysis/Course Projects/ExData_Plotting1/plot2.R', echo=TRUE)
source('~/Desktop/MOOCs/Data Science Specialization/Exploratory Data Analysis/Course Projects/ExData_Plotting1/plot3.R', echo=TRUE)
source('~/Desktop/MOOCs/Data Science Specialization/Exploratory Data Analysis/Course Projects/ExData_Plotting1/plot4.R', echo=TRUE)
source('~/Desktop/MOOCs/Data Science Specialization/Exploratory Data Analysis/Course Projects/ExData_Plotting1/plot4.R', echo=TRUE)
source('~/Desktop/MOOCs/Data Science Specialization/Exploratory Data Analysis/Course Projects/ExData_Plotting1/plot4.R', echo=TRUE)
